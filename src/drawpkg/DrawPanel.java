/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package drawpkg;

import shapespkg.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author otmangx
 */
public class DrawPanel extends javax.swing.JPanel {

    private javax.swing.JTable jTable;
    private DefaultTableModel jTableModel;
    Vector <ShapeRender>shapesList= new Vector();
    String mode;
    int px, py;
    public Point p1, p2;
    
    Color drawcolor = Color.BLACK;
    Color shapeBorderColor = Color.BLUE;
    String shapeBorderType = "solid";
    float shapeBorderSize = 1.0f;
    
    //ShapeRender shapeSelected=null;
    ShapeRender shapeCloned=null;
    int indexshapeSelected=-1;
    boolean moved=false;
    
    MainFrame parent;
    
    
    public DrawPanel() {
        
        initComponents();
        p1 =new Point();
        p2 =new Point();
        mode = new String("pencil");
        
    }
    
    public void setParent(MainFrame parent){
         this.parent = parent;
    }
    
    public void setTable(javax.swing.JTable Table, DefaultTableModel TableModel) {
        jTable = Table;
        jTableModel = TableModel;
    }
    
 
    public void addShape(Point p1, Color c) {
        
        if (mode.equals("pencil")) {
            shapesList.add(new Polyline(p1));
            ((Polyline)shapesList.lastElement()).setColor(c);
        }
        
        else if (mode.equals("rect")){
            shapesList.add(new Rrectangle(p1, p1, c));  
        }
        else if (mode.equals("ellipse")){
            shapesList.add(new Ellipse(p1, p1, c));
            
        }
        else if (mode.equals("line")){
            shapesList.add(new Line(p1, p1, c));
        }
        if (shapesList.lastElement() instanceof Bordered)
        {
            ((Bordered)shapesList.lastElement()).setBorderType(shapeBorderType);
            ((Bordered)shapesList.lastElement()).setBorderColor(shapeBorderColor);
            ((Bordered)shapesList.lastElement()).setBorderSize(shapeBorderSize);
        }
        
    }
    
    public void updateShape(Point p1, Point p2) {
        if (mode.equals("pencil")) {
        ((Polyline)shapesList.lastElement()).addPoint(p2);
        } else {
           shapesList.lastElement().update(p1, p2);
        }
    }
    
    
    public void updateLocationShape(ShapeRender s,int x, int y) {
        s.updateLocation(x, y);
    }
    
    
    public void selectShape(int index) {
        indexshapeSelected = index;
        parent.updateProperties();
        if (!mode.equals("move"))
            parent.changeMode("move");
    }
    
    
    public void DrawSelect(Graphics2D g) {
        if (!(shapesList.get(indexshapeSelected) instanceof Polyline)) {
            g.setStroke(new BasicStroke(5.0f, BasicStroke.CAP_BUTT, 
                                BasicStroke.JOIN_MITER, 40.0f,new float[]{30.0f},0.0f));
            g.setPaint(Color.GREEN);
            g.draw((Shape)shapesList.get(indexshapeSelected));
        }
    }
    
    
    public void deselectShape(){
        if (indexshapeSelected!=-1) {
            indexshapeSelected=-1;
            getRootPane().repaint();
        }
        parent.updateProperties();
        
    }
    
    
    public void cloneShape(int index){
        shapeCloned = (ShapeRender)(shapesList.get(index)).clone();
        shapeCloned.setColor(shapeCloned.getColor().darker());
        shapesList.add(shapeCloned);
    }

    
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
        RenderingHints.VALUE_ANTIALIAS_ON);
        if(!shapesList.isEmpty()){
            for(int i=0;i<shapesList.size();i++){
                if (shapesList.get(i).isVisible())
                shapesList.elementAt(i).paint(g2);
            }
        if (indexshapeSelected!=-1) DrawSelect(g2);
            for (int i=0;i!=shapesList.size();i++) {
                Object[] line = {i, shapesList.get(i).getName(), shapesList.get(i).isVisible()};
                jTableModel.addRow(line);
            }

    }}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(java.awt.Color.white);
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 304, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MousePressed
        parent.dragged = true;
        p1.x = evt.getX(); p1.y = evt.getY();
        if (mode.equals("move")) {
            for(int i=shapesList.size()-1;i>=0;i--) {
                if(!(shapesList.get(i).getClass().getName().equals("shapes.Polyline"))) {
                    if (((Shape)shapesList.get(i)).contains(p1)) {
                        selectShape(i);
                        cloneShape(indexshapeSelected);
                        moved = true;
                        px = p1.x ; py = p1.y;
                        break;
                    }
                    else deselectShape();
                    }
            }
        }
        else {
            addShape(p1, drawcolor);
        }
        
        getRootPane().repaint();
        
    }//GEN-LAST:event_MousePressed

    
    private void MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseDragged
        parent.dragged = true;
        p2.x = evt.getX(); p2.y = evt.getY();
        
        if (mode.equals("move")) {
            if (moved) {
                updateLocationShape(shapeCloned, p2.x-px, p2.y-py);
                moved = true;
                px = p2.x ; py = p2.y;
            }
        }
        else {
            updateShape(p1, p2);
        }
        getRootPane().repaint(); 
        
        
    }//GEN-LAST:event_MouseDragged

    
    private void MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseReleased
        p2.x = evt.getX(); p2.y = evt.getY();
        
        if (mode.equals("move")) {
            if (moved) {
            //shapesList.get(indexshapeSelected).updateLocation(p2.x-p1.x, p2.y-p1.y);
            shapeCloned.setColor(shapeCloned.getColor().brighter());
            shapeCloned = null;
            shapesList.remove(indexshapeSelected); // remove shapeCloned from shapesList
            indexshapeSelected = shapesList.size()-1;
            moved =false; // end moving
            }
        }
        else { 
           updateShape(p1, p2);
           //Object[] line = {shapesList.size(),shapesList.lastElement().getName(),shapesList.lastElement().isVisible()};
            //jTableModel.addRow(line);
        }
        getRootPane().repaint();
        parent.saveProject();
        parent.dragged = false;
        
    }//GEN-LAST:event_MouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
